generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  comments      Comment[]
  projects      Project[]
  sessions      Session[]
  votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String          @id @default(cuid())
  name           String
  appId          String
  email          String?
  image          String?
  banner         String?
  description    String?
  creatorId      String
  start          String
  end            String
  goal           String
  discord        String?
  twitter        String?
  website        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  creator        User            @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  comments       Comment[]
  fundedProjects FundedProject[]
  votes          Vote[]
}

model FundedProject {
  id        String  @id @default(cuid())
  projectId String
  amount    Float
  account   String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Vote {
  id        String  @id @default(uuid())
  userId    String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}
